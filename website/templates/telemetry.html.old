<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>DriveAhead F1 - Live Telemetry</title>
    <link rel="icon" type="image/png" href="{{ url_for('static', filename='images/logo.png') }}">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800;900&family=Orbitron:wght@400;500;600;700;800;900&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <script src="https://cdn.tailwindcss.com"></script>
    <script>
        tailwind.config = {
            theme: {
                extend: {
                    fontFamily: {
                        'f1': ['Orbitron', 'monospace'],
                        'body': ['Inter', 'sans-serif']
                    },
                    colors: {
                        'f1-red': '#FF1E1E',
                        'f1-blue': '#0090FF',
                        'f1-green': '#00FF41',
                        'f1-yellow': '#FFD700',
                        'f1-purple': '#A855F7',
                        'f1-orange': '#FF8700'
                    },
                    animation: {
                        'pulse-fast': 'pulse 1s cubic-bezier(0.4, 0, 0.6, 1) infinite',
                        'slide-up': 'slideUp 0.3s ease-out',
                        'glow': 'glow 2s ease-in-out infinite alternate'
                    }
                }
            }
        }
    </script>
    <style>
        @keyframes slideUp {
            from { transform: translateY(20px); opacity: 0; }
            to { transform: translateY(0); opacity: 1; }
        }
        
        @keyframes glow {
            from { box-shadow: 0 0 5px rgba(255, 30, 30, 0.5); }
            to { box-shadow: 0 0 20px rgba(255, 30, 30, 0.8), 0 0 30px rgba(255, 30, 30, 0.4); }
        }
        
        .f1-gradient {
            background: linear-gradient(135deg, #000 0%, #1a1a1a 50%, #000 100%);
        }
        
        .f1-border {
            border-image: linear-gradient(45deg, #FF1E1E, #0090FF, #00FF41) 1;
        }
        
        .driver-row {
            background: linear-gradient(90deg, rgba(0,0,0,0.9) 0%, rgba(26,26,26,0.8) 100%);
            border-left: 3px solid transparent;
            transition: all 0.5s cubic-bezier(0.4, 0, 0.2, 1);
            opacity: 0;
            transform: translateX(-20px);
        }
        
        .driver-row:hover {
            background: linear-gradient(90deg, rgba(255,30,30,0.1) 0%, rgba(26,26,26,0.9) 100%);
            border-left-color: #FF1E1E;
            transform: translateX(5px);
        }
        
        .position-1 { border-left-color: #FFD700 !important; }
        .position-2 { border-left-color: #C0C0C0 !important; }
        .position-3 { border-left-color: #CD7F32 !important; }
        
        .position-up {
            animation: positionUp 0.8s ease-out;
        }
        
        .position-down {
            animation: positionDown 0.8s ease-out;
        }
        
        @keyframes positionUp {
            0% { background: rgba(0, 255, 65, 0.3); }
            50% { transform: scale(1.02); }
            100% { background: transparent; }
        }
        
        @keyframes positionDown {
            0% { background: rgba(255, 30, 30, 0.3); }
            50% { transform: scale(0.98); }
            100% { background: transparent; }
        }
        
        #driver-list {
            position: relative;
        }
        
        #driver-list > div {
            position: relative;
        }
        
        .sector-fastest { color: #A855F7; font-weight: bold; }
        .sector-personal { color: #00FF41; font-weight: bold; }
        .sector-slower { color: #FFD700; }
        
        .live-indicator {
            animation: glow 2s ease-in-out infinite alternate;
        }
        
        .data-grid {
            background: linear-gradient(135deg, rgba(0,0,0,0.95) 0%, rgba(26,26,26,0.9) 100%);
            backdrop-filter: blur(10px);
        }
        
        .glass-panel {
            background: rgba(0,0,0,0.7);
            backdrop-filter: blur(15px);
            border: 1px solid rgba(255,255,255,0.1);
        }
    </style>
</head>
<body class="bg-black text-white font-body overflow-x-hidden">
    <!-- F1 Style Header -->
    <header class="f1-gradient border-b-2 border-f1-red relative overflow-hidden">
        <div class="absolute inset-0 bg-gradient-to-r from-transparent via-f1-red/10 to-transparent animate-pulse-fast"></div>
        <div class="container mx-auto px-6 py-4 relative z-10">
            <div class="flex items-center justify-between">
                <div class="flex items-center space-x-4">
                    <div class="live-indicator bg-f1-red w-4 h-4 rounded-full"></div>
                    <img src="{{ url_for('static', filename='images/logo.png') }}" alt="DriveAhead F1 Logo" class="h-8 w-8">
                    <h1 class="font-f1 text-3xl font-bold tracking-wider">
                        <span class="text-f1-red">DRIVE</span><span class="text-white">AHEAD</span>
                        <span class="text-f1-blue ml-2">F1</span>
                    </h1>
                    <div class="text-f1-green font-f1 text-sm font-bold">
                        <i class="fas fa-broadcast-tower mr-2"></i>LIVE TELEMETRY
                    </div>
                </div>
                
                <div class="flex items-center space-x-6">
                    <!-- Navigation Links -->
                    <div class="flex items-center space-x-4">
                        <a href="/" class="text-gray-300 hover:text-white transition-colors px-3 py-2 rounded-lg hover:bg-gray-800/50">
                            <i class="fas fa-home mr-2"></i>Home
                        </a>
                        <a href="/telemetry" class="text-red-500 font-semibold px-3 py-2 rounded-lg bg-red-500/10">
                            <i class="fas fa-tachometer-alt mr-2"></i>Telemetry
                        </a>
                        <a href="/standings" class="text-gray-300 hover:text-white transition-colors px-3 py-2 rounded-lg hover:bg-gray-800/50">
                            <i class="fas fa-trophy mr-2"></i>Standings
                        </a>
                        <a href="/predictions" class="text-gray-300 hover:text-white transition-colors px-3 py-2 rounded-lg hover:bg-gray-800/50">
                            <i class="fas fa-chart-line mr-2"></i>Live Predictions
                        </a>
                    </div>
                    
                    <div class="glass-panel px-4 py-2 rounded-lg">
                        <div class="text-xs text-gray-400">SESSION</div>
                        <div class="font-f1 text-f1-green" id="session-type">QUALIFYING</div>
                    </div>
                    <div class="glass-panel px-4 py-2 rounded-lg">
                        <div class="text-xs text-gray-400">TIME</div>
                        <div class="font-f1 text-f1-yellow" id="session-time">00:00</div>
                    </div>
                    <div class="glass-panel px-4 py-2 rounded-lg">
                        <div class="text-xs text-gray-400">WEATHER</div>
                        <div class="font-f1 text-f1-blue" id="weather-info">22Â°C</div>
                    </div>
                </div>
            </div>
        </div>
    </header>

    <!-- Main Telemetry Grid -->
    <div class="container mx-auto px-6 py-6">
        <div class="grid grid-cols-1 2xl:grid-cols-4 gap-6">
            
            <!-- Driver Leaderboard - Takes 3 columns -->
            <div class="2xl:col-span-3">
                <div class="data-grid rounded-xl p-6 border border-gray-800">
                    <div class="flex items-center justify-between mb-6">
                        <h2 class="font-f1 text-2xl font-bold text-f1-red flex items-center">
                            <i class="fas fa-tachometer-alt mr-3"></i>LIVE TIMING
                        </h2>
                        <div class="flex items-center space-x-4">
                            <div class="text-sm text-gray-400">Updates every second</div>
                            <div class="bg-f1-green w-2 h-2 rounded-full animate-pulse-fast"></div>
                        </div>
                    </div>
                    
                    <!-- Enhanced Table Headers -->
                    <div class="grid grid-cols-12 gap-4 p-4 bg-gradient-to-r from-gray-900 to-gray-800 rounded-lg mb-2 text-xs font-bold text-gray-300 uppercase tracking-wider">
                        <div class="col-span-1 text-center">POS</div>
                        <div class="col-span-2">DRIVER</div>
                        <div class="col-span-1 text-center">DRS</div>
                        <div class="col-span-1 text-center">TIRE</div>
                        <div class="col-span-1 text-center">STATUS</div>
                        <div class="col-span-2">LAP TIME</div>
                        <div class="col-span-3">SECTORS</div>
                        <div class="col-span-1 text-center">GAP</div>
                    </div>
                    
                    <!-- Driver Rows Container -->
                    <div id="driver-list" class="space-y-1">
                        <!-- Loading animation -->
                        <div class="text-center py-8">
                            <div class="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-f1-red"></div>
                            <div class="text-gray-400 mt-2">Loading live telemetry...</div>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Side Panel - Track Info & Race Control -->
            <div class="2xl:col-span-1 space-y-6">
                
                <!-- Track Status -->
                <div class="glass-panel rounded-xl p-4">
                    <h3 class="font-f1 text-lg font-bold text-f1-yellow mb-4 flex items-center">
                        <i class="fas fa-flag mr-2"></i>TRACK STATUS
                    </h3>
                    <div class="space-y-3">
                        <div class="flex justify-between">
                            <span class="text-gray-400">Status</span>
                            <span class="text-f1-green font-bold" id="track-status">GREEN</span>
                        </div>
                        <div class="flex justify-between">
                            <span class="text-gray-400">DRS</span>
                            <span class="text-f1-blue font-bold">ENABLED</span>
                        </div>
                        <div class="flex justify-between">
                            <span class="text-gray-400">Safety Car</span>
                            <span class="text-gray-300">NO</span>
                        </div>
                    </div>
                </div>
                
                <!-- Weather Info -->
                <div class="glass-panel rounded-xl p-4">
                    <h3 class="font-f1 text-lg font-bold text-f1-blue mb-4 flex items-center">
                        <i class="fas fa-cloud-sun mr-2"></i>WEATHER
                    </h3>
                    <div class="space-y-3" id="weather-details">
                        <div class="flex justify-between">
                            <span class="text-gray-400">Air Temp</span>
                            <span class="text-white font-bold">22Â°C</span>
                        </div>
                        <div class="flex justify-between">
                            <span class="text-gray-400">Track Temp</span>
                            <span class="text-white font-bold">35Â°C</span>
                        </div>
                        <div class="flex justify-between">
                            <span class="text-gray-400">Humidity</span>
                            <span class="text-white font-bold">65%</span>
                        </div>
                        <div class="flex justify-between">
                            <span class="text-gray-400">Wind</span>
                            <span class="text-white font-bold">8 km/h</span>
                        </div>
                    </div>
                </div>
                
                <!-- Race Control -->
                <div class="glass-panel rounded-xl p-4">
                    <h3 class="font-f1 text-lg font-bold text-f1-orange mb-4 flex items-center">
                        <i class="fas fa-microphone mr-2"></i>RACE CONTROL
                    </h3>
                    <div id="race-control-messages" class="space-y-2 max-h-64 overflow-y-auto">
                        <!-- Messages will be populated here -->
                    </div>
                </div>
                
                <!-- Live Track Map -->
                <div class="glass-panel rounded-xl p-4">
                    <h3 class="font-f1 text-lg font-bold text-f1-red mb-4 flex items-center">
                        <i class="fas fa-map mr-2"></i>LIVE TRACK
                    </h3>
                    <div id="track-map" class="relative bg-gray-900 rounded-lg overflow-hidden h-80">
                        <canvas id="trackCanvas" class="w-full h-full"></canvas>
                        <div class="absolute top-2 right-2 text-xs text-gray-400">
                            <div class="flex items-center space-x-2">
                                <div class="w-2 h-2 bg-green-500 rounded-full animate-pulse"></div>
                                <span>LIVE</span>
                            </div>
                        </div>
                        <div class="absolute bottom-2 left-2 text-xs text-gray-400">
                            <div id="currentCircuit" class="font-f1 font-bold">Loading Circuit...</div>
                        </div>
                        <div class="absolute bottom-2 right-2 text-xs text-gray-400">
                            <div class="flex flex-col items-end">
                                <div class="flex items-center space-x-1 mb-1">
                                    <div class="w-2 h-2 bg-red-500 rounded-full"></div>
                                    <span>P1</span>
                                </div>
                                <div class="flex items-center space-x-1 mb-1">
                                    <div class="w-2 h-2 bg-blue-500 rounded-full"></div>
                                    <span>Top 10</span>
                                </div>
                                <div class="flex items-center space-x-1">
                                    <div class="w-2 h-2 bg-gray-500 rounded-full"></div>
                                    <span>Others</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                
            </div>
        </div>
        
        <!-- Real-time Sector Analysis -->
        <div class="mt-6">
            <div class="glass-panel rounded-xl p-6">
                <h3 class="font-f1 text-xl font-bold text-f1-blue mb-4 flex items-center">
                    <i class="fas fa-stopwatch mr-2"></i>SECTOR ANALYSIS
                </h3>
                <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
                    <div class="text-center">
                        <h4 class="font-f1 text-lg font-bold text-f1-purple mb-2">SECTOR 1</h4>
                        <div id="sector1-best" class="text-2xl font-mono text-white mb-1">--:---.---</div>
                        <div id="sector1-last" class="text-sm text-gray-400">Last: --:---.---</div>
                        <div class="mt-2">
                            <canvas id="sector1Chart" width="120" height="60"></canvas>
                        </div>
                    </div>
                    <div class="text-center">
                        <h4 class="font-f1 text-lg font-bold text-f1-green mb-2">SECTOR 2</h4>
                        <div id="sector2-best" class="text-2xl font-mono text-white mb-1">--:---.---</div>
                        <div id="sector2-last" class="text-sm text-gray-400">Last: --:---.---</div>
                        <div class="mt-2">
                            <canvas id="sector2Chart" width="120" height="60"></canvas>
                        </div>
                    </div>
                    <div class="text-center">
                        <h4 class="font-f1 text-lg font-bold text-f1-yellow mb-2">SECTOR 3</h4>
                        <div id="sector3-best" class="text-2xl font-mono text-white mb-1">--:---.---</div>
                        <div id="sector3-last" class="text-sm text-gray-400">Last: --:---.---</div>
                        <div class="mt-2">
                            <canvas id="sector3Chart" width="120" height="60"></canvas>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Bottom Panel - Team Radios & Violations -->
        <div class="grid grid-cols-1 lg:grid-cols-2 gap-6 mt-6">
            
            <!-- Team Radios -->
            <div class="glass-panel rounded-xl p-6">
                <h3 class="font-f1 text-xl font-bold text-f1-purple mb-4 flex items-center">
                    <i class="fas fa-headphones mr-2"></i>TEAM RADIO
                </h3>
                <div id="team-radios" class="space-y-3 max-h-80 overflow-y-auto">
                    <!-- Radio messages will be populated here -->
                </div>
            </div>
            
            <!-- Track Violations -->
            <div class="glass-panel rounded-xl p-6">
                <h3 class="font-f1 text-xl font-bold text-f1-yellow mb-4 flex items-center">
                    <i class="fas fa-exclamation-triangle mr-2"></i>PENALTIES
                </h3>
                <div id="track-violations" class="space-y-3 max-h-80 overflow-y-auto">
                    <!-- Violations will be populated here -->
                </div>
            </div>
            
        </div>
    </div>

    <script>
        // Professional F1 Telemetry System with Real-time Track Visualization
        let drivers = null;
        let timingData = null;
        let trackCanvas = null;
        let trackCtx = null;
        let currentCircuit = null;
        let driverPositions = {};
        let sectorData = { sector1: [], sector2: [], sector3: [] };
        let currentSession = {
            type: 'qualifying',
            startTime: new Date(),
            weather: {}
        };

        // Initialize track visualization with realistic F1 circuit
        function initializeTrackVisualization() {
            trackCanvas = document.getElementById('trackCanvas');
            trackCtx = trackCanvas.getContext('2d');
            
            // Set canvas size
            trackCanvas.width = trackCanvas.offsetWidth;
            trackCanvas.height = trackCanvas.offsetHeight;
            
            // Initialize current circuit
            currentCircuit = getMonacoCircuit(); // Default to Monaco
            document.getElementById('currentCircuit').textContent = currentCircuit.name;
            
            // Start track animation
            animateTrack();
        }

        // Get Monaco Circuit layout (iconic F1 track)
        function getMonacoCircuit() {
            return {
                name: "Monaco - Monte Carlo",
                points: [
                    // Main straight
                    {x: 0.15, y: 0.7, sector: 1, type: 'straight'},
                    {x: 0.25, y: 0.7, sector: 1, type: 'straight'},
                    {x: 0.35, y: 0.7, sector: 1, type: 'straight'},
                    
                    // Sainte Devote (Turn 1)
                    {x: 0.4, y: 0.65, sector: 1, type: 'corner'},
                    {x: 0.45, y: 0.6, sector: 1, type: 'corner'},
                    
                    // Uphill to Casino
                    {x: 0.5, y: 0.55, sector: 1, type: 'straight'},
                    {x: 0.55, y: 0.5, sector: 1, type: 'straight'},
                    {x: 0.6, y: 0.45, sector: 1, type: 'straight'},
                    
                    // Casino complex
                    {x: 0.65, y: 0.4, sector: 1, type: 'corner'},
                    {x: 0.7, y: 0.35, sector: 2, type: 'corner'},
                    {x: 0.75, y: 0.3, sector: 2, type: 'corner'},
                    
                    // Portier
                    {x: 0.8, y: 0.25, sector: 2, type: 'corner'},
                    {x: 0.82, y: 0.2, sector: 2, type: 'corner'},
                    
                    // Swimming pool section
                    {x: 0.85, y: 0.15, sector: 2, type: 'straight'},
                    {x: 0.87, y: 0.12, sector: 2, type: 'corner'},
                    {x: 0.85, y: 0.1, sector: 2, type: 'corner'},
                    {x: 0.8, y: 0.1, sector: 2, type: 'straight'},
                    {x: 0.75, y: 0.12, sector: 2, type: 'corner'},
                    
                    // Hairpin approach
                    {x: 0.7, y: 0.15, sector: 3, type: 'straight'},
                    {x: 0.65, y: 0.2, sector: 3, type: 'straight'},
                    
                    // Grand Hotel Hairpin
                    {x: 0.6, y: 0.25, sector: 3, type: 'corner'},
                    {x: 0.55, y: 0.3, sector: 3, type: 'corner'},
                    {x: 0.5, y: 0.35, sector: 3, type: 'corner'},
                    {x: 0.45, y: 0.4, sector: 3, type: 'corner'},
                    {x: 0.4, y: 0.45, sector: 3, type: 'corner'},
                    {x: 0.35, y: 0.5, sector: 3, type: 'corner'},
                    
                    // Back straight
                    {x: 0.3, y: 0.55, sector: 3, type: 'straight'},
                    {x: 0.25, y: 0.6, sector: 3, type: 'straight'},
                    {x: 0.2, y: 0.65, sector: 3, type: 'straight'},
                    {x: 0.15, y: 0.7, sector: 3, type: 'straight'}
                ],
                sectors: [
                    {start: 0, end: 8, color: '#A855F7'},
                    {start: 9, end: 18, color: '#00FF41'},
                    {start: 19, end: 29, color: '#FFD700'}
                ],
                startFinish: {x: 0.15, y: 0.7}
            };
        }

        // Draw realistic F1 circuit with driver positions
        function drawTrack() {
            const width = trackCanvas.width;
            const height = trackCanvas.height;
            
            // Clear canvas
            trackCtx.clearRect(0, 0, width, height);
            
            // Scale track points to canvas
            const trackPoints = currentCircuit.points.map(p => ({
                x: p.x * width,
                y: p.y * height,
                sector: p.sector,
                type: p.type
            }));
            
            // Draw track outline (wider)
            trackCtx.strokeStyle = '#2a2a2a';
            trackCtx.lineWidth = 16;
            trackCtx.lineCap = 'round';
            trackCtx.lineJoin = 'round';
            trackCtx.beginPath();
            trackPoints.forEach((point, index) => {
                if (index === 0) {
                    trackCtx.moveTo(point.x, point.y);
                } else {
                    trackCtx.lineTo(point.x, point.y);
                }
            });
            trackCtx.closePath();
            trackCtx.stroke();
            
            // Draw track surface
            trackCtx.strokeStyle = '#1a1a1a';
            trackCtx.lineWidth = 12;
            trackCtx.beginPath();
            trackPoints.forEach((point, index) => {
                if (index === 0) {
                    trackCtx.moveTo(point.x, point.y);
                } else {
                    trackCtx.lineTo(point.x, point.y);
                }
            });
            trackCtx.closePath();
            trackCtx.stroke();
            
            // Draw sector markers
            currentCircuit.sectors.forEach((sector, index) => {
                const startPoint = trackPoints[sector.start];
                const endPoint = trackPoints[sector.end];
                
                // Sector start marker
                trackCtx.fillStyle = sector.color;
                trackCtx.beginPath();
                trackCtx.arc(startPoint.x, startPoint.y, 4, 0, 2 * Math.PI);
                trackCtx.fill();
                
                // Sector number
                trackCtx.fillStyle = '#fff';
                trackCtx.font = '10px monospace';
                trackCtx.textAlign = 'center';
                trackCtx.fillText(`S${index + 1}`, startPoint.x, startPoint.y - 8);
            });
            
            // Draw start/finish line
            const startFinish = {
                x: currentCircuit.startFinish.x * width,
                y: currentCircuit.startFinish.y * height
            };
            
            trackCtx.strokeStyle = '#fff';
            trackCtx.lineWidth = 3;
            trackCtx.beginPath();
            trackCtx.moveTo(startFinish.x - 8, startFinish.y - 5);
            trackCtx.lineTo(startFinish.x + 8, startFinish.y - 5);
            trackCtx.moveTo(startFinish.x - 8, startFinish.y + 5);
            trackCtx.lineTo(startFinish.x + 8, startFinish.y + 5);
            trackCtx.stroke();
            
            // Draw DRS zone indicators
            trackCtx.strokeStyle = '#00FF41';
            trackCtx.lineWidth = 2;
            trackCtx.setLineDash([5, 5]);
            trackCtx.beginPath();
            trackCtx.moveTo(trackPoints[2].x, trackPoints[2].y);
            trackCtx.lineTo(trackPoints[5].x, trackPoints[5].y);
            trackCtx.stroke();
            trackCtx.setLineDash([]);
            
            // Draw driver positions on track
            Object.entries(driverPositions).forEach(([driverCode, position]) => {
                const trackProgress = position.progress % 1;
                const pointIndex = Math.floor(trackProgress * (trackPoints.length - 1));
                const nextPointIndex = (pointIndex + 1) % trackPoints.length;
                
                const currentPoint = trackPoints[pointIndex];
                const nextPoint = trackPoints[nextPointIndex];
                const localProgress = (trackProgress * (trackPoints.length - 1)) % 1;
                
                // Interpolate position
                const x = currentPoint.x + (nextPoint.x - currentPoint.x) * localProgress;
                const y = currentPoint.y + (nextPoint.y - currentPoint.y) * localProgress;
                
                // Driver dot color based on position
                const teamColor = teamColors[position.team] || '#FFFFFF';
                let dotColor = teamColor;
                if (position.position === 1) dotColor = '#FFD700'; // Gold for P1
                else if (position.position <= 3) dotColor = '#C0C0C0'; // Silver for podium
                else if (position.position <= 10) dotColor = '#00FF41'; // Green for points
                
                // Draw driver dot with glow effect
                trackCtx.shadowColor = dotColor;
                trackCtx.shadowBlur = 8;
                trackCtx.fillStyle = dotColor;
                trackCtx.beginPath();
                trackCtx.arc(x, y, 5, 0, 2 * Math.PI);
                trackCtx.fill();
                trackCtx.shadowBlur = 0;
                
                // Driver code
                trackCtx.fillStyle = '#fff';
                trackCtx.font = '8px monospace';
                trackCtx.textAlign = 'center';
                trackCtx.strokeStyle = '#000';
                trackCtx.lineWidth = 2;
                trackCtx.strokeText(driverCode, x, y - 8);
                trackCtx.fillText(driverCode, x, y - 8);
            });
        }

        // Animate track with smooth updates
        function animateTrack() {
            drawTrack();
            requestAnimationFrame(animateTrack);
        }

        // Update driver positions on track with realistic movement
        function updateDriverPositions(telemetryData) {
            Object.entries(telemetryData).forEach(([key, driver]) => {
                if (key !== '_meta' && driver.driver_acronym) {
                    // Simulate realistic track progression based on lap time and position
                    const baseProgress = (Date.now() / 50000) % 1; // Slow realistic lap
                    const positionOffset = (driver.position || 1) * 0.05; // Spread drivers
                    const randomVariation = Math.sin(Date.now() / 3000) * 0.02; // Small variation
                    
                    driverPositions[driver.driver_acronym] = {
                        progress: (baseProgress - positionOffset + randomVariation) % 1,
                        team: driver.team_name,
                        position: driver.position || Math.floor(Math.random() * 20) + 1,
                        speed: driver.speed || Math.floor(Math.random() * 50) + 250, // km/h
                        inPit: driver.in_pit || false,
                        drsEnabled: driver.drs_enabled || false
                    };
                }
            });
        }

        // Update sector analysis charts
        function updateSectorAnalysis(timingData) {
            // Update sector times
            const sectors = ['sector1', 'sector2', 'sector3'];
            sectors.forEach((sector, index) => {
                const sectorTimes = [];
                Object.values(timingData.lines || {}).forEach(driver => {
                    if (driver.sectors && driver.sectors[index]) {
                        sectorTimes.push(parseFloat(driver.sectors[index].value || 0));
                    }
                });
                
                if (sectorTimes.length > 0) {
                    const bestTime = Math.min(...sectorTimes.filter(t => t > 0));
                    const lastTime = sectorTimes[sectorTimes.length - 1];
                    
                    if (bestTime < Infinity) {
                        document.getElementById(`${sector}-best`).textContent = formatTime(bestTime);
                    }
                    if (lastTime > 0) {
                        document.getElementById(`${sector}-last`).textContent = formatTime(lastTime);
                    }
                    
                    // Update sector chart
                    drawSectorChart(sector + 'Chart', sectorTimes.slice(-10));
                }
            });
        }

        // Draw mini sector performance charts
        function drawSectorChart(canvasId, times) {
            const canvas = document.getElementById(canvasId);
            if (!canvas) return;
            
            const ctx = canvas.getContext('2d');
            const width = canvas.width;
            const height = canvas.height;
            
            ctx.clearRect(0, 0, width, height);
            
            if (times.length === 0) return;
            
            const maxTime = Math.max(...times);
            const minTime = Math.min(...times);
            const timeRange = maxTime - minTime || 1;
            
            // Draw grid
            ctx.strokeStyle = '#333';
            ctx.lineWidth = 1;
            for (let i = 0; i <= 4; i++) {
                const y = (height / 4) * i;
                ctx.beginPath();
                ctx.moveTo(0, y);
                ctx.lineTo(width, y);
                ctx.stroke();
            }
            
            // Draw time line
            ctx.strokeStyle = '#00FF41';
            ctx.lineWidth = 2;
            ctx.beginPath();
            
            times.forEach((time, index) => {
                const x = (width / (times.length - 1)) * index;
                const y = height - ((time - minTime) / timeRange) * height;
                
                if (index === 0) {
                    ctx.moveTo(x, y);
                } else {
                    ctx.lineTo(x, y);
                }
            });
            
            ctx.stroke();
        }

        // Enhanced time formatting
        function formatTime(timeInSeconds) {
            if (!timeInSeconds || timeInSeconds === 0) return '--:---.---';
            
            const minutes = Math.floor(timeInSeconds / 60);
            const seconds = (timeInSeconds % 60).toFixed(3);
            return `${minutes}:${seconds.padStart(6, '0')}`;
        }

        // Team color mapping for F1 2025
        const teamColors = {
            'Mercedes': '#00D2BE',
            'Red Bull': '#FF0000', 
            'Ferrari': '#DC143C',
            'McLaren': '#FF8700',
            'Aston Martin': '#006F62',
            'Alpine': '#0090FF',
            'Williams': '#005AFF',
            'Sauber': '#52C41A',
            'Haas': '#FFFFFF',
            'RB F1 Team': '#6667AB'
        };

        // Create stunning driver row with F1 broadcast styling
        function createDriverRow(driver, timingDriver, position) {
            const teamColor = teamColors[driver.team_name] || '#FFFFFF';
            const positionClass = position <= 3 ? `position-${position}` : '';
            
            // Determine tire color
            const tireColor = getTireColor(timingDriver.tire_compound);
            const tireAge = timingDriver.tire_age || 0;
            
            // DRS status with visual indicator
            const drsStatus = timingDriver.drs_enabled;
            const drsClass = drsStatus ? 'text-f1-green' : 'text-gray-500';
            const drsIcon = drsStatus ? 'fas fa-wind' : 'fas fa-times';
            
            // Pit status
            const pitStatus = timingDriver.in_pit ? 'PIT' : timingDriver.pit_out ? 'OUT' : 'TRACK';
            const pitClass = timingDriver.in_pit ? 'text-f1-red' : timingDriver.pit_out ? 'text-f1-yellow' : 'text-f1-green';
            
            const driverRow = document.createElement('div');
            driverRow.className = `driver-row ${positionClass} rounded-lg p-4 animate-slide-up`;
            driverRow.style.borderLeftColor = teamColor;
            
            driverRow.innerHTML = `
                <div class="grid grid-cols-12 gap-4 items-center">
                    <!-- Position -->
                    <div class="col-span-1 text-center">
                        <div class="driver-position w-10 h-10 rounded-full flex items-center justify-center font-f1 text-lg font-bold" 
                             style="background: linear-gradient(135deg, ${teamColor}33, ${teamColor}66); border: 2px solid ${teamColor};">
                            ${position}
                        </div>
                    </div>
                    
                    <!-- Driver -->
                    <div class="col-span-2">
                        <div class="font-f1 text-lg font-bold" style="color: ${teamColor};">${driver.tla}</div>
                        <div class="text-xs text-gray-400 uppercase tracking-wide">${driver.team_name}</div>
                    </div>
                    
                    <!-- DRS -->
                    <div class="col-span-1 text-center">
                        <div class="${drsClass} text-lg">
                            <i class="${drsIcon}"></i>
                        </div>
                        <div class="text-xs text-gray-500">${drsStatus ? 'OPEN' : 'CLOSED'}</div>
                    </div>
                    
                    <!-- Tire -->
                    <div class="col-span-1 text-center">
                        <div class="driver-tire w-8 h-8 rounded-full mx-auto flex items-center justify-center text-xs font-bold ${tireColor}">
                            ${timingDriver.tire_compound?.charAt(0) || 'M'}
                        </div>
                        <div class="driver-tire-age text-xs text-gray-400">${tireAge} laps</div>
                    </div>
                    
                    <!-- Gap & Interval -->
                    <div class="col-span-2 text-center">
                        <div class="driver-gap font-f1 text-sm text-white">${timingDriver.gap_to_leader || '--'}</div>
                        <div class="driver-interval text-xs text-gray-400">${timingDriver.interval || '--'}</div>
                    </div>
                    
                    <!-- Lap Time -->
                    <div class="col-span-2">
                        <div class="driver-last-lap font-f1 text-lg font-bold text-white">${timingDriver.last_lap_time || '--:---.---'}</div>
                        <div class="driver-best-lap text-sm text-f1-green">${timingDriver.best_lap_time || '--:---.---'}</div>
                    </div>
                    
                    <!-- Speed & DRS -->
                    <div class="col-span-2 text-center">
                        <div class="driver-speed font-f1 text-xl font-bold text-f1-purple">${timingDriver.speed_trap || '---'}</div>
                        <div class="text-xs text-gray-400">km/h</div>
                    </div>
                    
                    <!-- Sectors (Compact) -->
                    <div class="col-span-2">
                        <div class="flex gap-2 justify-center items-center text-xs">
                            <span class="font-mono text-purple-400">${timingDriver.sectors?.[0]?.time || '--'}</span>
                            <span class="font-mono text-green-400">${timingDriver.sectors?.[1]?.time || '--'}</span>
                            <span class="font-mono text-yellow-400">${timingDriver.sectors?.[2]?.time || '--'}</span>
                        </div>
                        <div class="text-xs text-gray-500 text-center mt-1">S1 / S2 / S3</div>
                    </div>
                </div>
            `;
            
            return driverRow;
        }

        // Enhanced helper functions
        function getTireColor(compound) {
            switch(compound) {
                case 'SOFT': return 'bg-red-500 text-white';
                case 'MEDIUM': return 'bg-yellow-400 text-black';
                case 'HARD': return 'bg-gray-200 text-black';
                case 'INTERMEDIATE': return 'bg-green-500 text-white';
                case 'WET': return 'bg-blue-500 text-white';
                default: return 'bg-gray-600 text-white';
            }
        }

        function getSectorColor(time) {
            if (!time || time === '--') return 'text-gray-400';
            const timeFloat = parseFloat(time);
            if (timeFloat < 22) return 'sector-fastest'; // Purple - Fastest
            if (timeFloat < 25) return 'sector-personal'; // Green - Personal best
            return 'sector-slower'; // Yellow - Slower
        }

        // Update session info in header
        function updateSessionInfo(meta) {
            if (!meta) return;
            
            document.getElementById('session-type').textContent = meta.session_name || 'PRACTICE';
            
            // Update session time
            const sessionTime = new Date().toLocaleTimeString('en-US', { 
                hour12: false, 
                hour: '2-digit', 
                minute: '2-digit',
                second: '2-digit'
            });
            document.getElementById('session-time').textContent = sessionTime;
            
            // Update weather
            if (meta.weather) {
                document.getElementById('weather-info').textContent = `${meta.weather.air_temp}Â°C`;
                
                const weatherDetails = document.getElementById('weather-details');
                weatherDetails.innerHTML = `
                    <div class="flex justify-between">
                        <span class="text-gray-400">Air Temp</span>
                        <span class="text-white font-bold">${meta.weather.air_temp}Â°C</span>
                    </div>
                    <div class="flex justify-between">
                        <span class="text-gray-400">Track Temp</span>
                        <span class="text-white font-bold">${meta.weather.track_temp}Â°C</span>
                    </div>
                    <div class="flex justify-between">
                        <span class="text-gray-400">Humidity</span>
                        <span class="text-white font-bold">${meta.weather.humidity}%</span>
                    </div>
                    <div class="flex justify-between">
                        <span class="text-gray-400">Wind</span>
                        <span class="text-white font-bold">${meta.weather.wind_speed} km/h</span>
                    </div>
                `;
            }
        }

        // Enhanced fetch with real-time updates and track visualization
        async function fetchData() {
            try {
                const response = await fetch('/api/telemetry');
                const data = await response.json();
                
                if (data && typeof data === 'object') {
                    drivers = {};
                    timingData = { lines: {} };
                    
                    Object.keys(data).forEach(key => {
                        if (key !== '_meta' && data[key].driver_acronym) {
                            const driverData = data[key];
                            const racingNumber = driverData.position || Math.random().toString().substr(2, 2);
                            
                            drivers[racingNumber] = {
                                tla: driverData.driver_acronym,
                                full_name: driverData.driver_name,
                                team_name: driverData.team_name,
                                racing_number: racingNumber
                            };
                            
                            timingData.lines[racingNumber] = {
                                position: driverData.position,
                                last_lap_time: driverData.last_lap_time,
                                best_lap_time: driverData.best_lap_time,
                                tire_compound: driverData.tire_compound,
                                tire_age: driverData.tire_age,
                                drs_enabled: driverData.drs_enabled,
                                in_pit: driverData.in_pit,
                                pit_out: driverData.pit_out,
                                gap_to_leader: driverData.gap_to_leader,
                                interval: driverData.interval,
                                sectors: driverData.sectors || [{}, {}, {}],
                                speed_trap: driverData.speed_trap,
                                throttle_percent: driverData.throttle_percent,
                                brake_pressure: driverData.brake_pressure
                            };
                        }
                    });
                    
                    // Update all components
                    updateLeaderboard();
                    updateSessionInfo(data._meta);
                    updateRaceControlMessages(data._meta);
                    updateTeamRadios(data._meta);
                    updateTrackViolations(data._meta);
                    updateDriverPositions(data);
                    updateSectorAnalysis(timingData);
                }
            } catch (error) {
                console.error('Error fetching telemetry:', error);
                showConnectionError();
            }
        }

        // Enhanced leaderboard with better styling and animations
        let previousPositions = {};
        
        function updateLeaderboard() {
            const container = document.getElementById('driver-list');
            if (!drivers || !timingData) return;
            
            // Sort drivers by position
            const sortedDrivers = Object.keys(drivers).sort((a, b) => {
                const posA = parseInt(timingData.lines[a]?.position || 999);
                const posB = parseInt(timingData.lines[b]?.position || 999);
                return posA - posB;
            });
            
            // Get existing rows
            const existingRows = {};
            Array.from(container.children).forEach(row => {
                const number = row.dataset.driverNumber;
                if (number) existingRows[number] = row;
            });
            
            // Update or create rows
            sortedDrivers.forEach((racingNumber, index) => {
                const driver = drivers[racingNumber];
                const timingDriver = timingData.lines[racingNumber];
                const position = timingDriver.position;
                
                let driverRow = existingRows[racingNumber];
                
                if (driverRow) {
                    // Update existing row
                    updateDriverRow(driverRow, driver, timingDriver, position);
                    
                    // Check for position change
                    const oldPosition = previousPositions[racingNumber];
                    if (oldPosition && oldPosition !== position) {
                        if (oldPosition > position) {
                            driverRow.classList.add('position-up');
                        } else {
                            driverRow.classList.add('position-down');
                        }
                        setTimeout(() => {
                            driverRow.classList.remove('position-up', 'position-down');
                        }, 1000);
                    }
                    
                    // Smooth reordering with CSS transitions
                    const currentIndex = Array.from(container.children).indexOf(driverRow);
                    if (currentIndex !== index) {
                        if (index === 0) {
                            container.insertBefore(driverRow, container.firstChild);
                        } else {
                            const targetRow = container.children[index];
                            if (targetRow) {
                                container.insertBefore(driverRow, targetRow);
                            } else {
                                container.appendChild(driverRow);
                            }
                        }
                    }
                } else {
                    // Create new row
                    driverRow = createDriverRow(driver, timingDriver, position);
                    driverRow.dataset.driverNumber = racingNumber;
                    
                    if (index === 0) {
                        container.insertBefore(driverRow, container.firstChild);
                    } else {
                        const targetRow = container.children[index];
                        if (targetRow) {
                            container.insertBefore(driverRow, targetRow);
                        } else {
                            container.appendChild(driverRow);
                        }
                    }
                    
                    // Fade in animation
                    setTimeout(() => {
                        driverRow.style.opacity = '1';
                        driverRow.style.transform = 'translateX(0)';
                    }, 50);
                }
                
                previousPositions[racingNumber] = position;
            });
        }
        
        function updateDriverRow(row, driver, timingDriver, position) {
            // Update only the data that changes, not the entire row
            const posElement = row.querySelector('.driver-position');
            if (posElement) posElement.textContent = position;
            
            const gapElement = row.querySelector('.driver-gap');
            if (gapElement) gapElement.textContent = timingDriver.gap_to_leader || '--';
            
            const intervalElement = row.querySelector('.driver-interval');
            if (intervalElement) intervalElement.textContent = timingDriver.interval || '--';
            
            const lastLapElement = row.querySelector('.driver-last-lap');
            if (lastLapElement) lastLapElement.textContent = timingDriver.last_lap_time || '--:---.---';
            
            const bestLapElement = row.querySelector('.driver-best-lap');
            if (bestLapElement) bestLapElement.textContent = timingDriver.best_lap_time || '--:---.---';
            
            const speedElement = row.querySelector('.driver-speed');
            if (speedElement) speedElement.textContent = timingDriver.speed_trap || '---';
            
            const tireElement = row.querySelector('.driver-tire');
            if (tireElement) {
                tireElement.textContent = (timingDriver.tire_compound || 'M')[0];
                tireElement.className = 'driver-tire w-6 h-6 rounded-full flex items-center justify-center text-xs font-bold ' + getTireColorClass(timingDriver.tire_compound);
            }
            
            const tireAgeElement = row.querySelector('.driver-tire-age');
            if (tireAgeElement) tireAgeElement.textContent = timingDriver.tire_age || '0';
        }
        
        function getTireColorClass(compound) {
            if (!compound) return 'bg-yellow-400 text-black';
            if (compound.includes('SOFT')) return 'bg-red-500 text-white';
            if (compound.includes('MEDIUM')) return 'bg-yellow-400 text-black';
            if (compound.includes('HARD')) return 'bg-white text-black';
            return 'bg-yellow-400 text-black';
        }

        // Enhanced race control messages with real-time updates
        function updateRaceControlMessages(meta) {
            const container = document.getElementById('race-control-messages');
            const messages = [
                { time: '14:32', message: 'Green flag - Track clear', type: 'info' },
                { time: '14:31', message: 'DRS enabled for all sectors', type: 'info' },
                { time: '14:29', message: 'Yellow flag - Turn 7', type: 'warning' },
                { time: '14:28', message: 'Track limits warning - Turn 4', type: 'warning' },
                { time: '14:25', message: 'Session start', type: 'success' }
            ];
            
            container.innerHTML = messages.map(msg => `
                <div class="flex justify-between items-center p-2 bg-gray-800/50 rounded border-l-2 ${
                    msg.type === 'warning' ? 'border-yellow-500' : 
                    msg.type === 'success' ? 'border-green-500' : 'border-blue-500'
                }">
                    <div class="text-sm text-white">${msg.message}</div>
                    <div class="text-xs text-gray-400 font-mono">${msg.time}</div>
                </div>
            `).join('');
        }

        // Enhanced team radio messages
        function updateTeamRadios(meta) {
            const container = document.getElementById('team-radios');
            const radios = [
                { driver: 'VER', team: 'Red Bull', time: '14:32', message: 'Box, box, box!', priority: 'high' },
                { driver: 'HAM', team: 'Mercedes', time: '14:31', message: 'Tires are getting cold', priority: 'medium' },
                { driver: 'LEC', team: 'Ferrari', time: '14:30', message: 'I have understeer in sector 2', priority: 'medium' },
                { driver: 'NOR', team: 'McLaren', time: '14:29', message: 'Gap to car ahead?', priority: 'low' },
                { driver: 'RUS', team: 'Mercedes', time: '14:28', message: 'Blue flags, blue flags!', priority: 'high' }
            ];
            
            container.innerHTML = radios.map(radio => `
                <div class="flex items-start space-x-3 p-3 bg-gray-800/30 rounded border-l-2 ${
                    radio.priority === 'high' ? 'border-red-500' : 
                    radio.priority === 'medium' ? 'border-yellow-500' : 'border-green-500'
                }">
                    <div class="flex-shrink-0">
                        <div class="w-8 h-8 bg-f1-purple rounded-full flex items-center justify-center">
                            <span class="text-xs font-bold">${radio.driver}</span>
                        </div>
                    </div>
                    <div class="flex-1 min-w-0">
                        <div class="text-sm text-white">"${radio.message}"</div>
                        <div class="text-xs text-gray-400">${radio.team} â¢ ${radio.time}</div>
                    </div>
                </div>
            `).join('');
        }

        // Enhanced track violations/penalties
        function updateTrackViolations(meta) {
            const container = document.getElementById('track-violations');
            const violations = [
                { driver: 'SAI', violation: 'Track limits - Turn 4', penalty: '5 sec penalty', time: '14:25' },
                { driver: 'PER', violation: 'Unsafe release', penalty: 'Under investigation', time: '14:20' },
                { driver: 'ALO', violation: 'Impeding', penalty: 'Reprimand', time: '14:15' }
            ];
            
            container.innerHTML = violations.map(violation => `
                <div class="flex justify-between items-center p-3 bg-red-900/20 rounded border border-red-500/30">
                    <div class="flex items-center space-x-3">
                        <div class="w-8 h-8 bg-red-600 rounded-full flex items-center justify-center">
                            <span class="text-xs font-bold">${violation.driver}</span>
                        </div>
                        <div>
                            <div class="text-sm text-white">${violation.violation}</div>
                            <div class="text-xs text-red-400">${violation.penalty}</div>
                        </div>
                    </div>
                    <div class="text-xs text-gray-400 font-mono">${violation.time}</div>
                </div>
            `).join('');
        }

        // Show connection error
        function showConnectionError() {
            const container = document.getElementById('driver-list');
            container.innerHTML = `
                <div class="text-center py-8">
                    <div class="text-red-500 text-4xl mb-4">
                        <i class="fas fa-exclamation-triangle"></i>
                    </div>
                    <div class="text-white text-lg mb-2">Connection Lost</div>
                    <div class="text-gray-400">Attempting to reconnect...</div>
                </div>
            `;
        }

        // Initialize everything when page loads
        document.addEventListener('DOMContentLoaded', function() {
            console.log('F1 Live Telemetry System Starting...');
            
            // Initialize track visualization
            initializeTrackVisualization();
            
            // Start data fetching
            fetchData();
            
            // Set up real-time updates (every 1 second for live feel)
            setInterval(fetchData, 1000);
            
            console.log('Telemetry system ready - Live data streaming...');
        });
    </script>
</body>
</html>